#!/usr/bin/env bash

DENO_VERSION=${DENO_VERSION:-}
set -euo pipefail


export YQ_INSTALL_D="$(mktemp -d)"

install_deno() {
#  curl -fsSL https://deno.land/x/install/install.sh | sh -s -- ${DENO_VERSION:-} > /dev/null

  if ! command -v unzip >/dev/null; then
  	echo "Error: unzip is required to install Deno (see: https://github.com/denoland/deno_install#unzip-is-required)." 1>&2
  	exit 1
  fi


  	case $(uname -sm) in
  	"Darwin x86_64") target="x86_64-apple-darwin" ;;
  	"Darwin arm64") target="aarch64-apple-darwin" ;;
  	*) target="x86_64-unknown-linux-gnu" ;;
  	esac


  if [ -z "${DENO_VERSION:-}" ]; then
        deno_uri="https://github.com/denoland/deno/releases/latest/download/deno-${target}.zip"
  else
      deno_uri="https://github.com/denoland/deno/releases/download/${DENO_VERSION:-}/deno-${target}.zip"
  fi
  deno_install="${DENO_INSTALL:-$HOME/.deno}"
  bin_dir="$deno_install/bin"
  exe="$bin_dir/deno"

  if [ ! -d "$bin_dir" ]; then
  	mkdir -p "$bin_dir"
  fi

  curl --fail --location --progress-bar --output "$exe.zip" "$deno_uri"
  unzip -d "$bin_dir" -o "$exe.zip"
  chmod +x "$exe"
  rm "$exe.zip"

  echo "Deno was installed successfully to $exe"
  if command -v deno >/dev/null; then
  	echo "Run 'deno --help' to get started"
  else
  	case $SHELL in
  	/bin/zsh) shell_profile=".zshrc" ;;
  	*) shell_profile=".bash_profile" ;;
  	esac
  	echo "Manually add the directory to your \$HOME/$shell_profile (or similar)"
  	echo "  export DENO_INSTALL=\"$deno_install\""
  	echo "  export PATH=\"\$DENO_INSTALL/bin:\$PATH\""
  	echo "Run '$exe --help' to get started"
  fi

}

install_dyff() {(
  info <<< "--- install dyff (better JSON/Yaml diff)"
  HOME="$(mktemp -d)"
  mkdir -p "$HOME/bin"
  
  export PATH="$HOME/bin:$PATH"
  curl --silent --location https://git.io/JYfAY | 
    HOME="$HOME" bash                           | 
    info

  echo "export PATH=$PATH"
)}

install_yq() {(
  info <<< "--- install yq for yaml manipulation"
  info <<< "install to $YQ_INSTALL_D"

  export PATH=$PATH:$YQ_INSTALL_D/bin
  export PYTHONPATH=$PATH:$YQ_INSTALL_D

  pip3 install --isolated --target "$YQ_INSTALL_D" yq | info

  echo "export PATH=$PATH"
  echo "export PYTHONPATH=$PYTHONPATH"
)}

yq() {
  "$YQ_INSTALL_D/bin/yq" --sort-keys --yaml-roundtrip "$@"
}

info() {
  cat >&2
}

process_deno_pipeline() {
  DENO_OPTIONS="${DENO_OPTIONS:-""}"
  info <<< "adding github auth token DENO_AUTH_TOKENS to resolve private repos"
  export DENO_AUTH_TOKENS="$(join_by ';' "$GITHUB_TOKEN@raw.githubusercontent.com" ${DENO_AUTH_TOKENS:-})"

  export DENO_INSTALL="$HOME/.deno"
  export PATH="$PATH:$DENO_INSTALL/bin"

  if ! which deno >/dev/null; then
    install_deno >&2
  fi

  deno run            \
    --allow-read      \
    --allow-env       \
    --no-check=remote \
    $DENO_OPTIONS     \
    "$1"
}

resolve_pipeline() {
  PIPELINE_FILE="${1:-${PIPELINE_FILE:-".buildkite/pipeline"}}"

  if [ ! -f "$PIPELINE_FILE" ]; then
    for extension in ts yml yaml; do
      name="${PIPELINE_FILE}.${extension}"
      if [ -f "${name}" ]; then
        PIPELINE_FILE="${name}"
        break;
      fi
    done
  fi

  info <<< "will attempt to use pipeline file at ${PIPELINE_FILE}"
  echo "$PIPELINE_FILE"
}

process_pipeline() {
  PIPELINE_FILE="$(resolve_pipeline "${1:-}")"

  if [ ! -f "$PIPELINE_FILE" ]; then
    info <<< "Unable to process ${PIPELINE_FILE}: File not found"
    exit 1
  fi

  case "$PIPELINE_FILE" in
    *.ts)
      process_deno_pipeline "$PIPELINE_FILE"
      ;;
    *.yml|*.yaml)
      info <<< "WARN: processing pipeline as yaml - did you mean to target a typescript file?"
      cat "$PIPELINE_FILE"
      ;;
    *)
      info <<< "Unable to process ${PIPELINE_FILE}: Unknown format (expected extension: ts, yml, yaml)"
      exit 2
      ;;
  esac
}

process_branch_pipeline() {(
  BRANCH="$1"
  PIPELINE_FILE="$(resolve_pipeline "${2:-}")"

  cd "$(mktemp -d)"
  git clone $BUILDKITE_GIT_CLONE_FLAGS -b "$BRANCH" "$BUILDKITE_REPO" . | info


  if [ -f "$PIPELINE_FILE" ]; then
    process_pipeline "${PIPELINE_FILE}"
  else
    info <<< "${PIPELINE_FILE} does not exist, using an empty pipeline for the diff"
  fi
)}

is_diff() {
    ! diff -q --ignore-blank-lines "$1" "$2"
}

build_pr_url() {
    echo "https://github.com/ailohq/$BUILDKITE_PIPELINE_SLUG/pull/$BUILDKITE_PULL_REQUEST/files"
}

normalise_pipeline_output() {
    # dyff yaml --plain --restructure "$@"
    yq --sort-keys --yaml-roundtrip "$@"
}

  #echo "--- diff:" >&2
##   diff "${CURRENT_BRANCH_PIPELINE}" "${DEFAULT_BRANCH_PIPELINE}" |
#   diff <(normalise_pipeline_output "${CURRENT_BRANCH_PIPELINE}")    \
#        <(normalise_pipeline_output "${DEFAULT_BRANCH_PIPELINE}")  |
#     sed -e "s/'/'''/"                                             | # replace single ' char with triple ' char (ie. escape it) 
#     sed -e "s/^/      echo '/"                                    | # prefix each line with "      echo '"
#     sed -e "s/$/'/"                                                 # suffix each line with a closing '

  #echo "      git diff $BUILDKITE_PIPELINE_DEFAULT_BRANCH -- .buildkite                                                   "
  # echo "$(check_for_pipeline_changes --name-only --line-prefix '      echo ')                                                      "


post_comment() {
  MESSAGE="$(cat)"

  re="^(https|git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+).git$"

  if [[ $BUILDKITE_REPO =~ $re ]]; then
    GITHUB_USER=${BASH_REMATCH[4]}
    GITHUB_REPO=${BASH_REMATCH[5]}
  fi

  COMMENTS_URL="https://api.github.com/repos/${GITHUB_USER}/${GITHUB_REPO}/issues/${BUILDKITE_PULL_REQUEST}/comments"

  # jq -n --arg msg "${MESSAGE}" '{body: $msg}'       \
  #   | curl -sSg                                     \
  #       -u apikey:${GITHUB_TOKEN}                   \
  #       -H 'Accept: application/vnd.github.v3+json' \
  #       -H 'Content-Type: application/json'         \
  #       -X POST                                     \
  #       -d@- "$COMMENTS_URL"                        \
  #   | info
}

check_confirmation_comment() {
  CURRENT_BRANCH_PIPELINE="$1"
  DEFAULT_BRANCH_PIPELINE="$2"
  
  echo "--- posting diff info to $BUILDKITE_REPO" >&2

  MD_CODE_BLOCK='```'

  { cat | post_comment >&2; } <<CONTENT
$(md5sum "${CURRENT_BRANCH_PIPELINE}" | cut -d ' ' -f1)
:warning:WARN:warning:: The pipeline generated for the current branch is different to the pipeline generated in ${BUILDKITE_PIPELINE_DEFAULT_BRANCH}.
${MD_CODE_BLOCK}diff
$(
    diff <(normalise_pipeline_output "${DEFAULT_BRANCH_PIPELINE}")  \
         <(normalise_pipeline_output "${CURRENT_BRANCH_PIPELINE}")
)
${MD_CODE_BLOCK}
CONTENT

}

upload_rendered_pipeline() {
  info <<< "uploading pipeline"
  tr '$' '\$' | buildkite-agent pipeline upload
}

render_all_except_steps() {
  # dyff json "$1"     | 
  #   jq 'del(.steps)' | 
  #   dyff yaml -
  yq 'del(.steps)' "$@"
}

render_only_steps() {
  # dyff json "$1" | 
  #   jq .steps    | 
  #   dyff yaml -  | 
  #   tail -n+2      # remove document separator that dyff adds to the top of the output
  yq .steps "$@"
}

inject_diff_confirmation() {
  CURRENT_BRANCH_PIPELINE="$1"
  DEFAULT_BRANCH_PIPELINE="$2"

  info ""
  info "--- injecting diff confirmation"

  render_all_except_steps "${CURRENT_BRANCH_PIPELINE}"
  echo "steps:"

        if [ "$BUILDKITE_PULL_REQUEST" == "false" ]; then
  echo "- label: 'The pipeline definition files have been changed :warning:'                                                 "
  echo "  command: |                                                                                                         "
  echo "    echo '+++ pipeline defintion files have been changed!'                                                           "
  echo "    echo -e '\033[0;31mOpen a Pull Request for this branch in order to review the changes and continue the pipeline' "
  echo "    exit 1                                                                                                           "

        elif check_confirmation_comment "${CURRENT_BRANCH_PIPELINE}" "${DEFAULT_BRANCH_PIPELINE}"; then
  echo "- label: 'The pipeline definition files have been changed :warning:'                                                 "
  echo "  command: |                                                                                                         "
  echo "    echo '+++ pipeline defintion files have been changed!'                                                           "
  echo "    echo 'The pipeline definition has been changed!'                                                                 "
  echo "    echo 'See details of the change and confirmation at $(build_pr_url)'                                             "
  render_only_steps "${CURRENT_BRANCH_PIPELINE}"

        else
  echo "- block: 'Continue with modifications to Pipeline :warning:'                                                         "
  echo "  blocked_state: failed                                                                                              "
  echo "  prompt: |                                                                                                          "
  echo "    The pipeline definition has been changed!                                                                        "
  echo "    Check the changes at $(build_pr_url)                                                                             "
  echo "    Clicking OK will accept the changes and continue the pipeline.                                                   "
  render_only_steps "${CURRENT_BRANCH_PIPELINE}"

        fi
  echo ""
}

join_by() { local IFS="$1"; shift; echo "$*"; }

# CHECK_DIFF="${CHECK_DIFF:-$([ "$BUILDKITE_BRANCH" = "$BUILDKITE_PIPELINE_DEFAULT_BRANCH" ] && echo "true" || echo "false")}"

# if [ "$CHECK_DIFF" = "true" ]; then
#   process_pipeline "${1:-}" | 
#     buildkite-agent pipeline upload
# else
#   CURRENT_BRANCH_PIPELINE="${BUILDKITE_BRANCH}_pipeline.yaml"
#   DEFAULT_BRANCH_PIPELINE="${BUILDKITE_PIPELINE_DEFAULT_BRANCH}_pipeline.yaml"

#   info <<< "--- checking pipeline diff"
#   info <<< "build ${BUILDKITE_BRANCH} branch pipeline"
#   process_pipeline "${1:-}" \
#     > "${CURRENT_BRANCH_PIPELINE}"

#   info <<< "build ${BUILDKITE_PIPELINE_DEFAULT_BRANCH} branch pipeline"
#   process_branch_pipeline "$BUILDKITE_PIPELINE_DEFAULT_BRANCH" "${1:-}" \
#     > "${DEFAULT_BRANCH_PIPELINE}"

#   if is_diff "${CURRENT_BRANCH_PIPELINE}" "${DEFAULT_BRANCH_PIPELINE}"; then
#     info <<< "WARN: The pipeline generated for the current branch is different to the pipeline generated in ${BUILDKITE_PIPELINE_DEFAULT_BRANCH}."
#     info <<< "      Generating confirmation steps..."

#     # . <(install_dyff)
#     . <(install_yq)


#     inject_diff_confirmation "${CURRENT_BRANCH_PIPELINE}" "${DEFAULT_BRANCH_PIPELINE}" | 
#     #   tee rendered_pipeline.yaml |
#       tee >(sed ':a;s/^\([[:space:]]*\)[[:space:]]/\1./;ta' | nl -w 4 >&2)          |
#     #   dyff json -                 |
#       buildkite-agent pipeline upload

#     # inject_diff_confirmation "${CURRENT_BRANCH_PIPELINE}" "${DEFAULT_BRANCH_PIPELINE}" > rendered_pipeline.yaml
#     # buildkite-agent artifact upload rendered_pipeline.yaml
#     # exit 1;
#   else
#     upload_rendered_pipeline < "${CURRENT_BRANCH_PIPELINE}"
#   fi
# fi

process_pipeline "${1:-}" | 
  buildkite-agent pipeline upload
